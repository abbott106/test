import socket, ssl, threading, queue, uuid, os, io, shutil, time
from cds_logger import log_debug, log_info, log_warning, log_error, log_critical, makeLogger

TCP_CATCHER_IP = os.environ['TCP_CATCHER_IP']
TCP_CATCHER_PORT = int(os.environ['TCP_CATCHER_PORT'])
TLS_BOOL = os.environ['TLS_BOOL']
makeLogger()

EXIT_REQUEST = False

def packet_processor(q):
    b = io.BytesIO() 
    while True:
        data = q.get()
        if data == "DONE":
            log_info("ALL BYTES RECEIVED")
            log_info(f'bytes = {len(b.getvalue())}')
            break
        
        b.write(data)
        log_info(f"data is {len(data)}")
        
    q.task_done()
    unique_filename = f"{uuid.uuid4()}.xml"
    log_info(f"Saving packet to file: {unique_filename}")
    
    with open("/received_unvalidated/"+unique_filename, 'wb') as file:
        val = b.getvalue()
        log_info(f"length of data is {len(val)}")
        bytes_written = file.write(val)
        log_info(f"bytes written = {bytes_written}")

    file_size = os.path.getsize("/received_unvalidated/"+unique_filename)
    log_info(f"file size = {file_size}")
    

    

def handle_client(client_socket, q):
    processor_thread = threading.Thread(target=packet_processor, args=(q,))
    processor_thread.daemon = True
    processor_thread.start()

    while True:

        try:
            data = client_socket.recv(33554432)
            if not data:
                break
            q.put(data)
        except ConnectionResetError:
            break
    client_socket.close()
    q.put("DONE")
    q.join()


def tcp_server(host, port):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((host, port))
    server.listen(5)
    log_info(f"Server listening on {host}:{port}")


    

    while True:

        client_socket, addr = server.accept()
        
        q = queue.Queue()
        log_info(f"Accepted connection from {addr}")
        client_handler = threading.Thread(target=handle_client, args=(client_socket, q))
        client_handler.start()


def tcp_tls_server(host, port):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((host, port))
    server.listen(5)
    context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
    context.load_cert_chain(certfile='/opt/tcp_catcher/cert.pem', keyfile='/opt/tcp_catcher/key.pem')
    log_info(f"TCP/TLS Server listening on {host}:{port}")


    

    while True:

        client_socket, addr = server.accept()
        secureConnection = context.wrap_socket(client_socket, server_side=True)
        
        q = queue.Queue()
        log_info(f"Accepted connection from {addr}")
        client_handler = threading.Thread(target=handle_client, args=(secureConnection, q))
        client_handler.start()
    pass


def heartbeat():
    while True:
        log_info("catcher heartbeat ALIVE; tcp_catcher systemd process (1/3)")
        time.sleep(60)



if __name__ == "__main__":
    
    heartbeat_thread = threading.Thread(target=heartbeat, daemon=True)
    heartbeat_thread.start()

    HOST, PORT = TCP_CATCHER_IP, int(TCP_CATCHER_PORT)
    if TLS_BOOL == "False":
        try:
            tcp_server(HOST, PORT)
        except KeyboardInterrupt:
            log_info("Shutting down server...")
    elif TLS_BOOL == "True":
        try:
            tcp_tls_server(HOST, PORT)
        except KeyboardInterrupt:
            log_info("Shutting down server...")
