package main

import (
	"bytes"
	"embed"
	"encoding/base64"
	"encoding/xml"
	"flag"
	"crypto/rand"
	"fmt"
	"io/ioutil"
	"os"
	"time"
	"os/exec"
	"os/user"
	"path/filepath"
	"runtime"
	"sort"
	"strconv"
	"strings"
	"syscall"
	"unsafe"
)

//go:embed gpg-static
var gpgStaticFile embed.FS

//go:embed gpg-agent-static
var gpgAgentStaticFile embed.FS

type Root struct {
	XMLName    xml.Name   `xml:"Root"`
	CdsPayload CdsPayload `xml:"cds_payload"`
}

type CdsPayload struct {
	Files []File `xml:"file"`
}

type File struct {
	Name   string   `xml:"name,attr"`
	Base64 []string `xml:"base64"`
}

//UUID function 
func generateUUID() (string,error) {
	uuid := make([]byte,16)
	_,err := rand.Read(uuid)
	if err != nil {
		return "", err
	}

	uuid[6] = (uuid[6] & 0x0f) | 0x40
	uuid[8] = (uuid[8] & 0x3f) | 0x80 

	return fmt.Sprintf("%08x-%04x-%04x-%04x-%012x", uuid[0:4], uuid[4:6], uuid[6:8], uuid[8:10], uuid[10:]), nil
}

// Function to run the gpg-agent daemon as a goroutine
func runDaemon(gpgAgentPath string, done chan<- error) {
	daemon := exec.Command(gpgAgentPath, "--daemon")
	var stderr bytes.Buffer
	daemon.Stderr = &stderr

	if err := daemon.Start(); err != nil {
		done <- fmt.Errorf("daemon.Start: %v", err)
		return
	}

	// Wait for daemon to finish
	if err := daemon.Wait(); err != nil {
		done <- fmt.Errorf("daemon exited: %v, %s", err, stderr.String())
		return
	}

	done <- nil
}

// Function to kill the gpg-agent process
func killAgent() error {
	killcmd := exec.Command("killall", "gpg-agent")
	var stderr bytes.Buffer
	killcmd.Stderr = &stderr

	if err := killcmd.Run(); err != nil {
		return fmt.Errorf("failed to kill gpg-agent: %v, %s", err, stderr.String())
	}

	return nil
}

// Helper function to print errors with line numbers
func printError(err error) {
	if err != nil {
		_, file, line, _ := runtime.Caller(1)
		fmt.Printf("Error at %s:%d: %v\n", filepath.Base(file), line, err)
	}
}

// disableEcho turns off terminal echo for secure input
func disableEcho() {
	var termios syscall.Termios
	fd := syscall.Stdin
	if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TCGETS), uintptr(unsafe.Pointer(&termios)), 0, 0, 0); err != 0 {
		return
	}
	termios.Lflag &^= syscall.ECHO
	syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TCSETS), uintptr(unsafe.Pointer(&termios)), 0, 0, 0)
}

// enableEcho re-enables terminal echo
func enableEcho() {
	var termios syscall.Termios
	fd := syscall.Stdin
	if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TCGETS), uintptr(unsafe.Pointer(&termios)), 0, 0, 0); err != 0 {
		return
	}
	termios.Lflag |= syscall.ECHO
	syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TCSETS), uintptr(unsafe.Pointer(&termios)), 0, 0, 0)
}

// extractGpgStatic extracts the embedded gpg-static binary to a temporary file
func extractGpgStatic(tmpDir string) (string, error) {

	currentuser, err := user.Current()
	if err != nil {
		printError(fmt.Errorf("Error finding current user: %w", err))
		return "", err
	}

	username := currentuser.Username

	data, err := gpgStaticFile.ReadFile("gpg-static")
	if err != nil {
		return "", fmt.Errorf("failed to read embedded gpg-static binary: %w", err)
	}

	gpg_static_path := "gpg-static-" + username

	tmpGpgPath := filepath.Join(tmpDir, gpg_static_path)
	err = ioutil.WriteFile(tmpGpgPath, data, 0755)
	if err != nil {
		return "", fmt.Errorf("failed to write gpg-static to temp file: %w", err)
	}

	return tmpGpgPath, nil
}

// extractGpgStatic extracts the embedded gpg-static binary to a temporary file
func extractGpgAgentStatic(tmpDir string) (string, error) {


	currentuser, err := user.Current()
	if err != nil {
		printError(fmt.Errorf("Error finding current user: %w", err))
		return "", err
	}

	username := currentuser.Username

	data, err := gpgAgentStaticFile.ReadFile("gpg-agent-static")
	if err != nil {
		return "", fmt.Errorf("failed to read embedded gpg-agent-static binary: %w", err)
	}

	gpg_agent_static_path := "gpg-agent-static-" + username

	tmpGpgPath := filepath.Join(tmpDir, gpg_agent_static_path)
	err = ioutil.WriteFile(tmpGpgPath, data, 0755)
	if err != nil {
		return "", fmt.Errorf("failed to write gpg-agent-static to temp file: %w", err)
	}

	return tmpGpgPath, nil
}

func main() {
	// Define command-line flag for optional GPG key import
	importKey := flag.String("import-key", "", "Path to the GPG key file to import (Required)")
	decodeOnly := flag.Bool("decode-only", false, "Add if decryption is not needed and ")
	flag.Parse()

	if *importKey == "" && *decodeOnly == false {
		fmt.Printf("--import-key argument is required when decrypting, use --decode-only if decryption is not needed \n")
		return
	}


	/*dirname, err := os.UserHomeDir()
    if err != nil {
        fmt.Printf("Could not obtain home dir name for keyring\n")
		return
    }*/

	
	
	
	// Find the current executable path 
	execPath, err := os.Executable()
	if err != nil {
		fmt.Printf("Error getting executable path: %v \n", err)
	}

	execDir := filepath.Dir(execPath)
	
	//keyring dir for gpg keyring
	cdsKeyring := execDir+"/.gnupg-cds"

	tmpDir := execDir+"/.tmp-test"


	if tmpDelErr := os.RemoveAll(tmpDir); tmpDelErr != nil {	
		fmt.Printf("")
		
	}

	
	if err := os.Mkdir(tmpDir, 0700); err != nil {	
		printError(fmt.Errorf("could not create temporary keyring %s: %s", tmpDir, err))
		fmt.Printf("%s", err)
		return
	}

	tmpErr := os.Setenv("TMPDIR", tmpDir)
	if tmpErr != nil {
		fmt.Print("Error setting environment variable TMPDIR")
		return
	}

	

	// Find the folder that starts with "ISD" in the current directory
	folders, err := filepath.Glob("ISD*")
	if err != nil || len(folders) == 0 {
		printError(fmt.Errorf("no folder starting with 'ISD' found in the current directory"))
		return
	}
	folder := folders[0]

	// Find the head XML file (without an underscore in the name)
	xmlFiles, err := filepath.Glob(filepath.Join(folder, "*.xml"))
	if err != nil || len(xmlFiles) == 0 {
		printError(fmt.Errorf("no XML files found in the folder: %s", folder))
		return
	}

	var headFile string
	for _, file := range xmlFiles {
		if !strings.Contains(filepath.Base(file), "_") {
			headFile = file
			break
		}
	}

	if headFile == "" {
		printError(fmt.Errorf("no head file found (file without underscore in name)"))
		return
	}

	// Read the head XML file
	xmlData, err := ioutil.ReadFile(headFile)
	if err != nil {
		printError(fmt.Errorf("reading head XML file: %s", headFile))
		return
	}

	// Unmarshal the XML data from the head file
	var headRoot Root
	err = xml.Unmarshal(xmlData, &headRoot)
	if err != nil {
		printError(fmt.Errorf("unmarshaling head XML: %s", headFile))
		return
	}

	// Check if the <base64> content starts with "filename" to identify the header file
	isHeaderFile := false
	var outputFileName string
	var concatenatedData strings.Builder
	for _, file := range headRoot.CdsPayload.Files {
		if len(file.Base64) > 0 && strings.HasPrefix(file.Base64[0], "filename") {
			isHeaderFile = true
			outputFileName = file.Name
			break
		}
	}

	if isHeaderFile {
		// Handle case 1: Header file with child files
		if outputFileName == "" {
			printError(fmt.Errorf("no output file name specified in the head file"))
			return
		}

		// Find and sort child XML files with an underscore
		var childFiles []string
		for _, file := range xmlFiles {
			baseName := filepath.Base(file)
			if strings.Contains(baseName, "_") {
				childFiles = append(childFiles, file)
			}
		}
		if len(childFiles) == 0 {
			printError(fmt.Errorf("no child files found with an underscore in the name"))
			return
		}
		sort.Slice(childFiles, func(i, j int) bool {
			getNum := func(filename string) int {
				parts := strings.Split(strings.TrimSuffix(filename, ".xml"), "_")
				if len(parts) < 2 {
					return 0
				}
				num, err := strconv.Atoi(parts[1])
				if err != nil {
					return 0
				}
				return num
			}
			return getNum(filepath.Base(childFiles[i])) < getNum(filepath.Base(childFiles[j]))
		})

		// Concatenate <base64> data from child files in the sorted order
		for _, childFile := range childFiles {
			childXMLData, err := ioutil.ReadFile(childFile)
			if err != nil {
				printError(fmt.Errorf("reading child XML file: %s", childFile))
				return
			}
			var childRoot Root
			err = xml.Unmarshal(childXMLData, &childRoot)
			if err != nil {
				printError(fmt.Errorf("unmarshaling child XML: %s", childFile))
				return
			}
			for _, file := range childRoot.CdsPayload.Files {
				for _, base64Data := range file.Base64 {
					concatenatedData.WriteString(base64Data)
				}
			}
		}
	} else {
		// Handle case 2: Not a header file, process data within the same XML file
		for _, file := range headRoot.CdsPayload.Files {
			for _, base64Data := range file.Base64 {
				concatenatedData.WriteString(base64Data)
			}
			outputFileName = file.Name
		}
	}

	// Decode the concatenated base64 data
	decodedData, err := base64.StdEncoding.DecodeString(concatenatedData.String())
	if err != nil {
		printError(fmt.Errorf("decoding base64 data"))
		return
	}

	// Save the decoded data to the specified output file
	err = ioutil.WriteFile(outputFileName, decodedData, 0644)
	if err != nil {
		printError(fmt.Errorf("writing to file: %s", outputFileName))
		return
	}

	fmt.Printf("Data decoded and saved to %q\n", outputFileName)

	if *decodeOnly != false {
		fmt.Print("Decode only selected, skipping decryption")
		return
	}

	// Extract the `gpg-static` binary
	gpgPath, err := extractGpgStatic(tmpDir)
	if err != nil {
		printError(fmt.Errorf("extracting gpg-static: %v", err))
		return
	}

	// Extract the `gpg-agent-static` binary
	gpgAgentPath, err := extractGpgAgentStatic(tmpDir)
	if err != nil {
		printError(fmt.Errorf("extracting gpg-agent-static: %v", err))
		return
	}

	
	// Prepare for agent daemon kill running processes 
	killcmd := exec.Command("killall", "gpg-agent")

	

	var stderr_pass bytes.Buffer 
	killcmd.Stderr = &stderr_pass

	outputAgent , erro := killcmd.Output()

	if erro != nil {
		fmt.Printf("%s", outputAgent)
	}


	// Run the first daemon command in a goroutine
	daemonDone := make(chan error)
	go runDaemon(gpgAgentPath, daemonDone)

	time.Sleep(2 * time.Second)

	// Kill any existing gpg-agent process
	if err := killAgent(); err != nil {
		fmt.Printf("Error killing gpg-agent: %v\n", err)
	}
	
	// Wait for the first daemon to complete
	if err := <-daemonDone; err != nil {
		fmt.Printf("First daemon error: %v\n", err)
	}

	// Run the daemon command again in the main goroutine
	if err := exec.Command(gpgAgentPath, "--daemon").Run(); err != nil {
		fmt.Printf("Error restarting gpg-agent: %v\n", err)
	} else {
		fmt.Println("gpg-agent restarted successfully")
	}
	

	

	if err := os.RemoveAll(cdsKeyring); err != nil {	
		fmt.Printf("")
		
	}
	
	

	if err := os.Mkdir(cdsKeyring, 0700); err != nil {	
		printError(fmt.Errorf("could not create temporary keyring %s: %s", cdsKeyring, err))
		fmt.Printf("%s", err)
		return
	}

	

	
	cmd := exec.Command(gpgPath, "--batch", "--yes", "--homedir", cdsKeyring,  "--import", *importKey,  )
	var stderr_decrypt bytes.Buffer
	cmd.Stderr = &stderr_decrypt
	if err := cmd.Run(); err != nil {	
		printError(fmt.Errorf("importing GPG key: %s", stderr_decrypt.String()))
		return
	}
	fmt.Printf("GPG key imported from %s\n", *importKey)


	// Prompt for passphrase without showing it in the terminal
	fmt.Print("Enter GPG passphrase: ")
	disableEcho()
	var passphrase string
	fmt.Scanln(&passphrase)
	enableEcho()
	fmt.Println() // Print newline after passphrase entry

	// Decrypt the file using gpg-static with passphrase as an environment variable
	decryptedFileName := strings.TrimSuffix(outputFileName, ".pgp")
	cmdDecrypt := exec.Command(gpgPath, "--decrypt", "--batch", "--yes","--agent-program", gpgAgentPath, "--pinentry-mode", "loopback", "--passphrase", passphrase, "--homedir", cdsKeyring,  "--output", decryptedFileName, outputFileName)

	var stderrDecrypt bytes.Buffer 
	cmdDecrypt.Stderr = &stderrDecrypt

	if err := cmdDecrypt.Run(); err != nil {
		printError(fmt.Errorf("decrypting file: %s", stderrDecrypt.String()))
		return
	}
	
	if err := os.Remove(outputFileName); err != nil {
        printError(fmt.Errorf("Failed to remove: %s",outputFileName ))
    }
	fmt.Printf("Removing decoded file %s\n", outputFileName)

	fmt.Printf("File decryped and saved as %q\n", decryptedFileName)

	if err := os.RemoveAll(cdsKeyring); err != nil {	
		fmt.Printf("")
		
	}
	tmErr := os.Unsetenv("TMPDIR")
	if tmErr != nil {
		fmt.Printf("Could not unset TMPDIR environment variable")
	}
}
