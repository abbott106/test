def updateTasks(self, group_id, new_data):
    try:
        # ✅ Fetch existing records from the database for the given group_id
        self.cur.execute("SELECT mtu, interval_seconds FROM icmp_tasks WHERE group_id = ?", (group_id,))
        existing_data = {(int(row[0]), int(row[1])) for row in self.cur.fetchall()}  # Convert to a set of tuples

        # ✅ Normalize new data (convert to tuples)
        new_data_tuples = [(int(entry["mtu_size"]), int(entry["test_interval"])) for entry in new_data]

        to_insert = []  # List to store records that need insertion
        to_delete = []  # List to store records that need deletion

        # ✅ Iterate through new data and check if it already exists
        for mtu, interval in new_data_tuples:
            if (mtu, interval) not in existing_data:  # Only insert if it's not already in DB
                to_insert.append((group_id, mtu, interval))

        # ✅ Iterate through existing data and check if it should be deleted
        for mtu, interval in existing_data:
            if (mtu, interval) not in new_data_tuples:  # Only delete if it's not in new data
                to_delete.append((group_id, mtu, interval))

        # ✅ DELETE only extra records
        if to_delete:
            self.cur.executemany(
                "DELETE FROM icmp_tasks WHERE group_id = ? AND mtu = ? AND interval_seconds = ?",
                to_delete
            )

        # ✅ INSERT only missing records
        if to_insert:
            self.cur.executemany(
                "INSERT INTO icmp_tasks (group_id, mtu, interval_seconds) VALUES (?, ?, ?)",
                to_insert
            )

        # ✅ Commit changes
        self.con.commit()

    except Exception as e:
        log_error(f"Failed to update ICMP tasks for {group_id}: {str(e)}")
        raise e