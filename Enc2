import argparse
import gnupg
import os

def encrypt_file(gpg, file_path, recipient, destination):
    with open(file_path, 'rb') as f:
        status = gpg.encrypt_file(f, recipients=recipient, output=destination)
    if status.ok:
        print(f"File encrypted successfully! Saved to {destination}")
    else:
        print(f"Encryption failed: {status.stderr}")

def decrypt_file(gpg, file_path, passphrase, destination):
    with open(file_path, 'rb') as f:
        status = gpg.decrypt_file(f, passphrase=passphrase, output=destination)
    if status.ok:
        print(f"File decrypted successfully! Saved to {destination}")
    else:
        print(f"Decryption failed: {status.stderr}")

def main():
    parser = argparse.ArgumentParser(description="Encrypt or Decrypt a file using GPG.")
    parser.add_argument('operation', choices=['encrypt', 'decrypt'], help="Operation to perform: encrypt or decrypt")
    parser.add_argument('key', help="Path to the key or passphrase (recipient's public key for encryption, private key passphrase for decryption)")
    parser.add_argument('file', help="Path to the file to encrypt or decrypt")
    parser.add_argument('destination', help="Path to save the output file")

    args = parser.parse_args()

    gpg = gnupg.GPG()

    if args.operation == 'encrypt':
        encrypt_file(gpg, args.file, args.key, args.destination)
    elif args.operation == 'decrypt':
        decrypt_file(gpg, args.file, args.key, args.destination)

if __name__ == '__main__':
    main()
